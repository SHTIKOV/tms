<script>
        const DESCRIPTION_LENGTH = 100;
        const TASK_STATUS_LIST = ['planned', 'work', 'closed'];
        const TASK_STATUS_COLOR_LIST = {
            work:    '#dc3545', 
            closed:  '#28a745',
            planned: '#007bff'
        };
        
        function Task (data = {}) {
            let self = this,
                def = {{ defaultTask | json_encode | raw }};

            ko.mapping.fromJS ($.extend (def, data), {
                username: {
                    create: opts => {
                        return ko.observable (opts.data).extend ({
                            required: {
                                message: 'Please supply user name.'
                            }
                        });
                    }
                },
                description: {
                    create: opts => {
                        return ko.observable (opts.data).extend ({
                            required: {
                                message: 'Please supply task description.'
                            }
                        });
                    }
                },
                email: {
                    create: opts => {
                        return ko.observable (opts.data).extend ({
                            email: true,
                            required: {
                                message: 'Please supply email address.'
                            }
                        });
                    }
                },
                created: {
                    create: opts => {
                        return moment (opts.data.date ? opts.data.date : null);
                    }
                },
            }, self);

            self.createdDate = self.created.format ('MMMM Do YYYY, h:mm:ss a');

            self.errors = ko.validation.group (self);

            self.shortDescription = ko.pureComputed ({
                read: () => {
                    let desc = self.description ();
                    return desc.length > DESCRIPTION_LENGTH 
                        ? desc.slice (0, DESCRIPTION_LENGTH-3) + '...' 
                        : desc
                },
                owner: self
            });

            self.showDescription = function () {
                viewModel.editModel.show ({
                    title: `Description task: #${self.id ()}`,
                    template: 'task-show-description-modal',
                    data: self,
                    hideSaveBtn: true,
                    isLg: true,
                });
            }

            {% if isAuth() %}
            self.edit = function () {
                viewModel.editModel.show ({
                    title: `Edit task: #${self.id ()}`,
                    template: 'task-edit-modal',
                    onSave: self.save,
                    onValidate: self.validate,
                    data: self,
                    isLg: true,
                });
            }

            self.remove = function () {
                let n = noty (
                    'Are you sure wanna remove this task?', 
                    'warning', 
                    [
                        Noty.button ('Yes', 'btn btn-danger', function () {
                            $.ajax ({
                                type:   "GET",
                                url:    "/tasks/remove",
                                cache:  false,
                                data:   {id: self.id ()},
                                success: function () {
                                    noty ('Task removed', 'success');
                                    viewModel.tasks.remove (self);
                                    n.close ();
                                },
                                error: function (xhr, ajaxOptions, thrownError) {
                                    noty (thrownError, "error");
                                }
                            });
                        }, {id: 'yes', 'data-status': 'ok'})
                    ],
                    false
                );
            }
            {% endif %}

            self.save = function () {
                let data = ko.mapping.toJS (self);
                delete data.created;
                
                $.ajax ({
                    type:   "GET",
                    url:    "/tasks/edit",
                    cache:  false,
                    data:   data,
                    success: function (task) {
                        noty ('Task saved', 'success');
                        viewModel.table.load ();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        noty ("Can't save task", "error");
                    }
                });
            }

            self.validate = function () {
                if (self.errors ().length > 0) {
                    noty ('Check that the form is filled in correctly', 'warning');
                    return false;
                }

                return true;
            }
        }

        function ViewModel () {
            let self = this;

            self.editModel = new ModalEditor ();
            self.table = new Table ({
                head: [
                    {name: 'ID',          field: 'task.id',          sort: true,  width: '55px'},
                    {name: 'Name',        field: 'task.username',    sort: true},
                    {name: 'Email',       field: 'task.email',       sort: true},
                    {name: 'Description', field: 'task.description', sort: true},
                    {name: 'Status',      field: 'task.status',      sort: true},
                    {name: 'Created',     field: 'task.created',     sort: true,  width: '150px'},
                    {name: 'Action',      field: '',                 sort: false, width: '200px', align: 'right'},
                ],
                loadUrl: '/tasks/load'
            }, {
                addMethod: function () {
                    let task = new Task ();
                    self.editModel.show ({
                        title: 'Add new task',
                        template: 'task-edit-modal',
                        onSave: task.save,
                        data: task,
                        onValidate: task.validate,
                        isLg: true,
                    });
                },
                onLoad: function (tasks) {
                    viewModel.table.data (tasks.map (task => new Task (task)));
                }
            });
        }

        var viewModel = new ViewModel ();
        ko.applyBindings (viewModel, $("body")[0]);
    </script>